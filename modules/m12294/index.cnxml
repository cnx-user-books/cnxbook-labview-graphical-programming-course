<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Serial Write &amp; Read VI</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>59503da0-5b74-4b68-9c2a-dc8395f4861c</md:uuid>
</metadata>

  <content>
    <section id="s1">
      <title>NI Instrument Simulator</title>
      <list id="s1l1" list-type="enumerated">
	<item>
	  Power off the NI Instrument Simulator and configure it to
	  communicate through the serial port by setting the following
	  switches on the side of the box.
	  <figure id="s1l1f1">
	    <media id="idm7629296" alt=""><image src="../../media/simserial.png" mime-type="image/png"/></media>
	  </figure>
	  These switch settings configure the instrument as a serial
	  device with the following settings:
	  <list id="s1l1l1">
	    <item>
	      <m:math>
		<m:apply>
		  <m:eq/>
		  <m:ci><m:mtext>Baud rate</m:mtext></m:ci>
		  <m:cn>9,600</m:cn>
		</m:apply>
	      </m:math>
	    </item>
	    <item>
	      <m:math>
		<m:apply>
		  <m:eq/>
		  <m:ci><m:mtext>Data bits</m:mtext></m:ci>
		  <m:cn>8</m:cn>
		</m:apply>
	      </m:math>
	    </item>
	    <item>
	      <m:math>
		<m:apply>
		  <m:eq/>
		  <m:ci>Parity</m:ci>
		  <m:ci><m:mtext>no parity</m:mtext></m:ci>
		</m:apply>
	      </m:math>
	    </item>
	    <item>
	      <m:math>
		<m:apply>
		  <m:eq/>
		  <m:ci><m:mtext>Stop bits</m:mtext></m:ci>
		  <m:cn>1</m:cn>
		</m:apply>
	      </m:math>
	    </item>
	    <item>
	      <m:math>
		<m:apply>
		  <m:eq/>
		  <m:ci><m:mtext>Flow control parameters</m:mtext></m:ci>
		  <m:ci><m:mtext>hardware handshaking</m:mtext></m:ci>
		</m:apply>
	      </m:math>
	    </item>
	  </list>
	  Handshaking is a means of data flow control. Software
	  handshaking involves embedding control characters in
	  transmitted data. For example, XON/XOFF flow control works
	  by enclosing a transmitted message between the two control
	  characters XON and XOFF. Hardware handshaking uses voltages
	  on physical wires to control data flow. The RTS and CTS
	  lines of the RS-232 device are frequently used for this
	  purpose. Most lab equipment uses hardware handshaking.
	</item>
	<item>
	  Make sure the NI Instrument Simulator is connected to a
	  serial port on the computer with a serial cable. Make a note
	  of the port number.
	</item>
	<item>
	  Power on the NI Instrument Simulator. The Power, Ready, and
	  Listen LEDs are lit to indicate that the device is in serial
	  communication mode.
	</item>
      </list>
    </section>
    <section id="s2">
      <title>Block Diagram</title>
      <list id="s2l1" list-type="enumerated">
	<item>
	  Open a blank VI and build the block diagram shown in <link target-id="s2l1f1"/>.
	  <figure id="s2l1f1">
	    <media id="idm6168624" alt=""><image src="../../media/Serialbd.png" mime-type="image/png"/></media>
	  </figure>
	  <list id="s2l1l1" list-type="enumerated">
	    <item>
		<media id="idm5557040" alt=""><image src="../../media/ioassist-a80c.png" mime-type="image/png"/></media>
	      Place the <code>Instrument I/O</code> Express
	      VI, located on the <code>Functions&gt;&gt;Input</code>
	      palette, on the block diagram. Complete the following
	      steps in the <code>Instrument I/O Assistant</code>
	      dialog box that appears to configure the Express VI.
	      <list id="s2l1l1l1" list-type="enumerated">
		<item>
		  Choose <code>COM1</code> (or <code>COM2</code>
		  depending on the connection port of the NI
		  Instrument Simulator) from the <code>Select an
		  instrument</code> pull-down menu.
		</item>
		<item>
		  Click the <code>Add Step</code> button and click
		  <code>Write</code>. In the command field, type
		  <code>*IDN?</code> and select <code>\n</code> as the
		  <code>Termination character</code>.
		</item>
		<item>
		  Click the <code>Add Step</code> button and click
		  <code>Read and Parse</code>.
		</item>
		<item>
		  Click the <code>Add Step</code> button and click
		  <code>Read and Parse</code> again.
		  <note id="idm72768">
		    The Instrument Simulator returns the byte size of
		    the response, the termination character, the
		    response, then another termination
		    character. Therefore, after <code>*IDN?</code> is
		    sent to the instrument, the response must be read
		    twice.
		  </note>
		</item>
		<item>
		  Click the <code>Run button</code> (not the <code>Run
		  this step</code> button). The <code>Run</code>
		  button runs the entire sequence.
		</item>
		<item>
		  Return to the first <code>Read and Parse</code> step.
		</item>
		<item>
		  Click the <code>Auto parse</code> button. The value
		  returned is the size in bytes of the query response.
		</item>
		<item>
		  Rename <code>Token</code> to <code>String
		  Length</code> in the <code>Token name</code> text
		  box.
		</item>
		<item>
		  Select the second <code>Read and Parse</code> step.
		</item>
		<item>
		  Click the <code>Auto parse</code> button. The value
		  returned is the identification string of the NI
		  Instrument Simulator.
		</item>
		<item>
		  Rename <code>Token</code> to <code>String</code> in the <code>Token</code> name text
		  box. The configuration window should be similar to
		  the <link target-id="s2l1l1l1f1"/>.
		  <figure id="s2l1l1l1f1">
		    <media id="idp289040" alt=""><image src="../../media/IOSerial.png" mime-type="image/png"/></media>
		  </figure>
		</item>
		<item>
		  Select <code>OK</code> to return to the block
		  diagram.
		</item>
	      </list>
	    </item>
	    <item>
	      Right-click the <code>String</code> output and select
	      <code>Create&gt;&gt;Indicator</code> from the shortcut menu.
	    </item>
	    <item>
	      Right-click the <code>String Length</code> output and
	      select <code>Create&gt;&gt;Indicator</code> from the shortcut
	      menu.
	      <note type="tip" id="idp2808704">
		Since LabVIEW is set to handle errors automatically,
		there is no need to connect a <code>Simple Error
		Handler</code> VI to error out.
	      </note>
	    </item>
	  </list>
	</item>
	<item>
	  Display the front panel and run the VI.
	</item>
	<item>
	  Save the VI as <code>Serial Communication.vi</code> in the
	  <code>C:\Exercises\LabVIEW Basics I</code> directory.
	</item>
	<item>
	  Close the VI when finished.
	</item>
      </list>
    </section>
	      
  </content>
  
</document>