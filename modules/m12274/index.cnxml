<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Analog Output</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>cfeea23c-f8d3-47f4-abf1-8c4a68e2a571</md:uuid>
</metadata>

  <content>
    <para id="p1">
      Use analog output to perform digital-to-analog (D/A)
      conversions. The available <link target-id="f1">analog output
      types</link> for a task are voltage and current.
    </para>
    <figure id="f1">
      <media id="idp1585248" alt=""><image src="../../media/MAXAOMeasType.png" mime-type="image/png"/></media>
    </figure>
    <para id="p2">
      To perform a voltage or current task, a compatible device must
      be installed that can generate that form of signal.
    </para>
    <section id="s1">
      <title>Task Timing</title>
      <para id="s1p1">
	When performing analog output, the task can be timed to <link target-id="s1s1">Generate 1 Sample</link>, <link target-id="s1s2">Generate n Samples</link>, or <link target-id="s1s3">Generate Continuously</link>.
      </para>
      <section id="s1s1">
	<title>Generate 1 Sample</title>
	<para id="s1s1p1">
	  Use single updates if the signal level is more important
	  than the generation rate. For example, generate one sample
	  at a time if you need to generate a constant, or DC,
	  signal. You can use software timing to control when the
	  device generates a signal.
	</para>
	<para id="s1s1p2">
	  This operation does not require any buffering or hardware
	  timing. For example, if you need to generate a known voltage
	  to stimulate a device, a single update would be an
	  appropriate task.
	</para>
      </section>
      <section id="s1s2">
	<title>Generate n Samples</title>
	<para id="s1s2p1">
	  One way to generate multiple samples for one or more
	  channels is to generate single samples in a repetitive
	  manner. However, generating a single data sample on one or
	  more channels over and over is inefficient and time
	  consuming. Moreover, you do not have accurate control over
	  the time between each sample or channel. Instead, you can
	  use hardware timing, which uses a buffer in computer memory
	  to generate samples more efficiently.
	</para>
	<para id="s1s2p2">
	  You can use software timing or hardware timing to control
	  when a signal is generated. With software timing, the rate
	  at which the samples are generated is determined by the
	  software and operating system instead of by the measurement
	  device. With hardware timing, a TTL signal, such as a clock
	  on the device, controls the rate of generation. A hardware
	  clock can run much faster than a software loop. A hardware
	  clock is also more accurate than a software loop.
	</para>
	<note id="idp1260992">
	  Some devices do not support hardware timing. Consult the
	  device documentation if you are unsure if the device
	  supports hardware timing.
	</note>
	<para id="s1s2p3">
	  Programmatically, you need to include the timing function,
	  specifying the <code>sample rate</code> and the <code>sample
	  mode (finite)</code>. As with other functions, you can
	  generate multiple samples for a single channel or multiple
	  channels.
	</para>
	<para id="s1s2p4">
	  Use Generate <m:math><m:ci>n</m:ci></m:math> Samples if you
	  want to generate a finite time-varying signal, such as an AC
	  sine wave.
	</para>
      </section>
      <section id="s1s3">
	<title>Generate Continuously</title>
	<para id="s1s3p1">
	  Continuous generation is similar to Generate <m:math><m:ci>n</m:ci></m:math> Samples,
	  except that an event must occur to stop the generation. If
	  you want to continuously generate signals, such as
	  generating a non-finite AC sine wave, set the timing mode to
	  <code>continuous</code>.
	</para>
      </section>
    </section>
    <section id="s2">
      <title>Task Triggering</title>
      <para id="s2p1">
	When a device controlled by NI-DAQmx does something, it
	performs an action. Two very common actions are producing a
	sample and starting a generation. Every NI-DAQmx action needs
	a stimulus or cause. When the stimulus occurs, the action is
	performed. Causes for actions are called triggers. The start
	trigger starts the generation. The reference trigger is not
	supported for analog output tasks.  
      </para>
    </section>
  </content>
</document>