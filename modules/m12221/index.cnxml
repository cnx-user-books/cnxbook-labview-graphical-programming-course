<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Auto-Indexing</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>9b02b082-ab83-4bb4-92de-23043b792a15</md:uuid>
</metadata>
  
  <content>
    <para id="para1">
      If you wire an <code>array</code> to a <code>For Loop</code> or
      <code>While Loop</code> input tunnel, you can read and process
      every element in that <code>array</code> by enabling
      auto-indexing. When you auto-index an <code>array</code> output
      tunnel, the output <code>array</code> receives a new element
      from every iteration of the loop. The wire from the <code>output
      tunnel</code> to the <code>array indicator</code> becomes
      thicker as it changes to an <code>array</code> at the loop
      border, and the <code>output tunnel</code> contains square
      brackets representing an <code>array</code>, as shown in <link target-id="f1"/>.
      <figure id="f1">
	<media id="idm6859216" alt=""><image src="../../media/autoindexon.png" mime-type="image/png"/></media>
      </figure>
    </para>
    <para id="para2">
      Disable auto-indexing by right-clicking the tunnel and selecting
      <code>Disable Indexing</code> from the shortcut menu. For
      example, disable auto-indexing if you need only the last value
      passed to the tunnel in the previous example.
    </para>
    <para id="para3">
      Because you can use <code>For Loops</code> to process
      <code>arrays</code> an element at a time, LabVIEW enables
      auto-indexing by default for every <code>array</code> you wire
      to a <code>For Loop</code> and for each output tunnel that is
      created. Auto-indexing for <code>While Loops</code> is disabled
      by default. To enable auto-indexing, right-click a tunnel and
      select <code>Enable Indexing</code> from the shortcut menu.
    </para>
    <section id="section1">
      <title>Creating Two-Dimensional Arrays</title>
      <para id="para4">
	You can use two <code>For Loops</code>, one inside the other,
	to create a 2-D <code>array</code>. The outer <code>For
	Loop</code> creates the row elements, and the inner <code>For
	Loop</code> creates the column elements, as shown in <link target-id="f2"/>.
	<figure id="f2">
	  <media id="idm6191184" alt=""><image src="../../media/2darrayforloop.png" mime-type="image/png"/></media>
	</figure>
      </para>
    </section>
    <section id="section2">
      <title>Using Auto-Indexing to Set the For Loop Count</title>
      <para id="para5">
	If you enable auto-indexing on an <code>array</code> wired to
	a <code>For Loop</code> input terminal, LabVIEW sets the
	<code>count</code> terminal to the array size so you do not
	need to wire the <code>count</code> terminal.
      </para>
      <para id="para6">
	In <link target-id="f3"/>, the <code>For Loop</code> executes a
	number of times equal to the number of elements in the
	<code>array</code>. Normally, if the <code>count</code>
	terminal of the <code>For Loop</code> is not wired, the run
	arrow is broken. However, in this case the run arrow is not
	broken.
	<figure id="f3">
	  <media id="idp1811664" alt=""><image src="../../media/autoindexinput.png" mime-type="image/png"/></media>
	</figure>
      </para>
      <para id="para7">
	If you enable auto-indexing for more than one tunnel or if you
	wire the <code>count</code> terminal, the count changes to the
	smaller of the two. For example, if you wire an
	<code>array</code> with
	<m:math>
	  <m:cn>10</m:cn>
	</m:math>
	elements to a <code>For Loop</code> input tunnel and you set
	the <code>count</code> terminal to
	<m:math>
	  <m:cn>15</m:cn>
	</m:math>,
	the loop executes only
	<m:math>
	  <m:cn>10</m:cn>
	</m:math> times.
      </para>
    </section>
  </content>
  
</document>