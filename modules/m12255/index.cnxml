<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>File I/O VIs and Functions</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>cc3bd93c-efac-4b42-9ed4-bb069dcf17ff</md:uuid>
</metadata>

  <content>
    <para id="p1">
      File I/O operations pass data to and from files. Use the File
      I/O VIs and functions located on the <code>Functions&gt;&gt;All
	Functions&gt;&gt;File I/O</code> palette to handle all aspects of file
      I/O, including the following:
      <list id="p1l1">
	<item>
	  Opening and closing data files
	</item>
	<item>
	  Reading data from and writing data to files
	</item>
	<item>
	  Reading from and writing to spreadsheet-formatted files
	</item>
	<item>
	  Moving and renaming files and directories
	</item>
	<item>
	  Changing file characteristics
	</item>
	<item>
	  Creating, modifying, and reading configuration files
	</item>
      </list>
    </para>
    <section id="s1">
      <title>File I/O VIs</title>
      <para id="s1p1">
	The File I/O palette is divided into four types of operations:
	high-level, low-level, advanced, and express.
      </para>
      <section id="s1s1">
	<title>High-Level File I/O VIs</title>
	<para id="s1s1p1">Use the high-level File I/O VIs located on the top row of
	  the <code>Functions&gt;&gt;All Functions&gt;&gt;File I/O</code>
	  palette to perform common I/O operations. Refer to the
	  <link document="m12256">High-Level File I/O VIs</link> section
	  for more information about the high-level File I/O VIs.
	</para>
	<para id="s1s1p2">
	  You can save time and programming effort by using the
	  high-level VIs to write to and read from files. The
	  high-level VIs perform read or write operations in
	  addition to opening and closing the file. If an error
	  occurs, the high-level VIs display a dialog box that
	  describes the error. You can choose to halt execution or
	  to continue. However, because high-level VIs encapsulate
	  the entire file operation into one VI, they are difficult
	  to customize to any use other than the one intended. Use
	  low-level VIs for more specific tasks.
	</para>
      </section>
      <section id="s1s2">
	<title>Low-Level and Advanced File I/O VIs and Functions</title>
	<para id="s1s2p1">
	  Use the low-level File I/O VIs and functions located on
	  the middle row of the <code>Functions&gt;&gt;All Functions&gt;&gt;File
	    I/O</code> palette and the Advanced File I/O functions
	  located on the <code>Functions&gt;&gt;All Functions&gt;&gt;File
	    I/O&gt;&gt;Advanced File Functions</code> palette to control
	  each file I/O operation individually.
	</para>
	<para id="s1s2p2">
	  Use the principal low-level functions to create or open a
	  file, write data to or read data from the file, and close
	  the file. The low-level VIs and functions can handle most
	  file I/O needs. Refer to the <cite><cite-title>LabVIEW Basics II:
	    Development Course Manual</cite-title></cite> for more information
	  about the Advanced File I/O functions.
	</para>
      </section>
      <section id="s1s3">
	<title>File I/O Express VIs</title>
	<para id="s1s3p1">
	  The Express VIs on the <code>File I/O</code> palette include
	  the <code>Read LabVIEW Measurement File</code> Express VI
	  and the <code>Write LabVIEW Measurement File</code> Express
	  VI. The LabVIEW measurement data file (<code>.lvm</code>) is
	  a tab-delimited text file you can open with a spreadsheet
	  application or a text-editing application. In addition to
	  the data an Express VI generates, the <code>.lvm</code> file
	  includes information about the data, such as the date and
	  time the data was generated.
	</para>
	<para id="s1s3p2">
	  Refer to the <link document="m12266">Data Acquisition and
	  Waveforms</link> section, for more information on using the File I/O
	  Express VIs.
	</para>
      </section>
    </section>
    <section id="s2">
      <title>LabVIEW Data Directory</title>
      <para id="s2p1"><media id="idp14447472" alt=""><image src="../../media/dddIcon.png" id="s2f1" mime-type="image/png"/></media>
	Use the default LabVIEW Data directory to store the data files
	LabVIEW generates, such as <code>.lvm</code> or
	<code>.txt</code> files. LabVIEW installs the <code>LabVIEW
	Data</code> directory in the default file directory for your
	operating system to help you organize and locate the data
	files LabVIEW generates. By default, the <code>Write LabVIEW
	Measurement File</code> Express VI stores the <code>.lvm</code> files
	it generates in this directory, and the <code>Read LabVIEW
	Measurement File</code> Express VI reads from this directory. The
	<code>Default Data Directory</code> constant, shown in <link target-id="s2f1"/>, and the Default Data Directory property also
	return the <code>LabVIEW Data</code> directory by default.
      </para>
      <para id="s2p2">
	Select <code>Tools&gt;&gt;Options</code> and select
	<code>Paths</code> from the top pull-down menu to specify a
	different default data directory. The default data directory
	differs from the default directory, which is the directory you
	specify for new VIs, custom controls, VI templates, or other
	LabVIEW documents you create.
      </para>
    </section>
    <section id="s3">
      <title>Basics of File I/O</title>
      <para id="s3p1">
	A typical file I/O operation involves the following process:
	<list id="s3p1l1" list-type="enumerated">
	  <item>
	    Create or open a file. Indicate where an existing file
	    resides or where you want to create a new file by
	    specifying a path or responding to a dialog box to direct
	    LabVIEW to the file location. After the file opens, a
	    refnum represents the file. A reference number, or refnum,
	    is a unique identifier for an object, such as a file,
	    device, or network connection.
	  </item>
	  <item>
	    Read from or write to the file.
	  </item>
	  <item>
	    Close the file.
	  </item>
	</list>
      </para>
    </section>

  </content>
  
</document>