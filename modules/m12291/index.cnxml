<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Using Instrument Driver VIs</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>5497f14a-d890-4b10-b3b8-376e2596b76d</md:uuid>
</metadata>

  <content>
    <para id="p1">
      Instrument drivers are developed with a specific instrument in
      mind and eliminate the need for the user to know the exact IEEE
      488.2 commands that the instrument is expecting.  
    </para>
    <section id="s1">
      <title>Components of an Instrument Driver</title>
      <para id="s1p1">
	All instrument drivers in the library have the same basic VI
	hierarchy. The hierarchy, sequence of VIs, and error handling
	are the same as those used in other areas of I/O in LabVIEW,
	such as file I/O, DAQ, TCP/IP, and so on. Refer to the <link document="m12255">File I/O VIs and Functions</link> section of the
	Strings and File I/O lesson, for more
	information about error handling.
      </para>
      <para id="s1p2">
	<link target-id="s1p2f1"/> shows the hierarchy of an instrument
	driver.
	<figure id="s1p2f1">
	  <media id="idp13047056" alt=""><image src="../../media/instdrivercomp.png" mime-type="image/png"/></media>
	</figure>
      </para>
      <para id="s1p3">
	The high-level functions are built from the low-level
	functions. For the most control over the instrument, use the
	low-level functions. The high-level functions are easy to use
	and have soft front panels that resemble the
	instrument. Instrument drivers have VIs in the following
	categories:
	<list id="s1p3l1" list-type="labeled-item">
	  <item><label>Initialize</label>
	    

	    Initializes the communication channel to the
	    instrument. This VI also can perform an identification
	    query and reset operation, and it can perform any
	    necessary actions to place the instrument in its default
	    power-on state or other specified state.
	  </item>
	  <item><label>Configuration</label>
	    

	    Configures the instrument to perform operations, such as
	    setting up the trigger rate.
	  </item>
	  <item><label>Action/Status</label>
	    

	    Contains two types of VIs. Action VIs cause the instrument
	    to initiate or terminate test and measurement
	    operations. Status VIs obtain the current status of the
	    instrument or the status of pending operations. An example
	    of an action VI is <code>Acquire Single Shot</code>. An
	    example of a status VI is <code>Query Transfer
	    Pending</code>.
	  </item>
	  <item><label>Data</label>
	    

	    Transfers data to or from the instrument, such as reading
	    a measured waveform from the instrument or downloading a
	    waveform to the instrument.
	  </item>
	  <item><label>Utility</label>
	    

	    Performs a wide variety of functions, such as reset,
	    self-test, error query, and revision query.
	  </item>
	  <item><label>Close</label>
	    

	    Terminates the communication channel to the instrument and
	    deallocates the resources for that instrument.
	  </item>
	</list>
      </para>
      <para id="s1p4">
	All National Instruments instrument drivers are required to
	implement the following functions: <code>initialize</code>, <code>close</code>, <code>reset</code>,
	<code>self-test</code>, <code>revision query</code>, <code>error query</code>, and <code>error message</code>.
      </para>
      <section id="s1s1">
	<title>Application Examples</title>
	<para id="s1s1p1">
	  LabVIEW also includes application example VIs that show how
	  to use the component VIs to perform common tasks. Typically,
	  this includes configuring, triggering, and returning
	  measurements from an instrument. An application example VI
	  does not initialize or close the instrument driver. These
	  VIs are not intended to be a soft front panel for the
	  instrument but rather to demonstrate some instrument driver
	  capabilities and guide you in developing your own VI.
	</para>
      </section>
    </section>
    <section id="s2">
      <title>Inputs and Outputs of Instrument Driver VIs</title>
      <para id="s2p1">
	Just as all instrument drivers share a common VI hierarchy,
	they also share common inputs and outputs.
      </para>
      <section id="s2s1">
	<title>Resource Name or Instrument Descriptor</title>
	<para id="s2s1p1">
	  When you initialize the communication channel to an
	  instrument, you must know the resource name or instrument
	  descriptor. A resource is an instrument or interface, and
	  the instrument descriptor is the exact name and location of
	  a resource in the following format:
	  <code display="block" id="idp9479776">
	    Interface Type[board index]::Address::INSTR
	  </code>
	  Optional parameters are shown in square brackets <code>[ ]</code>. For
	  example, <code>GPIB::2::INSTR</code> is the instrument
	  descriptor for a GPIB instrument at address 2.
	</para>
	<para id="s2s1p2">The VISA resource name control located on the
	  <code>Controls&gt;&gt;All Controls&gt;&gt;I/O</code> palette is similar
	  to the DAQ channel name control, but it is specifically used
	  for instrument control. Refer to the <link document="m12288">VISA</link> section for more information about
	  VISA.
	</para>
	<para id="s2s1p3">
	  You can use MAX to determine what resources and instrument
	  addresses are available, as you did in <link document="m12285">GPIB Configuration with MAX</link> when you
	  assigned a VISA alias of <code>devsim</code> to the NI
	  Instrument Simulator. The alias makes it easier to
	  communicate with instruments because you no longer need to
	  memorize which interface and address each instrument
	  uses. You can use the alias in the VISA resource name
	  control instead of the instrument descriptor. For example,
	  you can type <code>devsim</code> instead of
	  <code>GPIB::2::INSTR</code>.
	</para>
      </section>
      <section id="s2s2">
	<title>VISA Sessions</title>
	<para id="s2s2p1">
	  After you initialize an instrument, the Initialize VI
	  returns a VISA session number. The VISA session is a
	  connection or link to a resource, such as the
	  instrument. You do not need to display this value. However,
	  each time you communicate with that device, you must wire
	  the VISA session input on the instrument driver VIs. After
	  you finish communicating with the instrument, you use the
	  <code>Close</code> VI to close all references or resources
	  for the instrument.
	</para>
      </section>
    </section>
    <example id="ex1">
      <title>Example Instrument Driver Application</title>
      <para id="ex1p1">
	The block diagram in <link target-id="ex1f1"/> initializes the
	instrument with the <code>devsim</code> alias, uses a
	configuration VI to select a waveform, uses two data VIs to
	read the waveform and the waveform scaling information, closes
	the instrument, and checks the error status. Every application
	that uses an instrument driver has a similar sequence of
	events.
      </para>
      <figure id="ex1f1">
	<media id="idp6109488" alt=""><image src="../../media/instdrvex.png" mime-type="image/png"/></media>
      </figure>
    </example>

  </content> 
</document>